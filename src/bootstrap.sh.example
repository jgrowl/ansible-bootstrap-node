#!/bin/sh

if [[ $EUID -ne 0 ]]; then
  echo "You must be root!" 2>&1
  exit 1
fi

if [ ! -f /root/.ssh/id_rsa.pub ]; then
  echo "Generating ssh key..."
  ssh-keygen -t rsa
fi

# Add its own ssh key to its own authorized_keys limiting it to only itself!!!
AUTHORIZED_KEYS_FILE="/root/.ssh/authorized_keys"
LOCAL_SUBNET=192.168.0.*
#Note that this is the ansible node's root public key. This is a little insecure putting this here. No one should be
#able to connect back as root with this key since it shows up in its own authorized_keys list but with a from 
#restriction to itself. This also may be insecure if this can be spoofed.
SSH_RSA="REPLACE ME WITH THE CONTENTS OF YOUR PUBLIC SSH KEY"
AUTHORIZED_KEYS="from=\"$LOCAL_SUBNET\" $SSH_RSA"

if ! grep -Fxq "$AUTHORIZED_KEYS" $AUTHORIZED_KEYS_FILE
then
  echo "Adding ansible node to authorized_keys"
  echo $AUTHORIZED_KEYS >> /root/.ssh/authorized_keys
fi

# Set up interface
echo "Copying /etc/network/interfaces"
rm /etc/network/interfaces
echo "# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
        address $1
        netmask 255.255.255.0
        network 192.168.0.0
        broadcast 192.168.0.255
        gateway 192.168.0.1
        dns-nameservers 8.8.8.8 8.8.4.4" > /etc/network/interfaces

echo "Copying /etc/resolv.conf..."
rm /etc/resolv.conf
echo "# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 8.8.8.8
nameserver 8.8.4.4" > /etc/resolv.conf

echo "Restarting networking..."
nohup /etc/init.d/networking restart &

# This script will self destruct!
echo "Success! This file will now self destruct."
basename=`basename $0`
rm -Rf ./$basename
